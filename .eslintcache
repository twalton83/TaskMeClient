[{"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js":"1","/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js":"2","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js":"3","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js":"4","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js":"5","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js":"6","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js":"7","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js":"8","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js":"9","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Project.js":"10","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/AppStyle.js":"11","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectListStyle.js":"12","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectCardStyle.js":"13","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectModalStyle.js":"14","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Task.js":"15","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskModal.js":"16","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskModalStyle.js":"17","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/hooks.js":"18","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskListItem.js":"19","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskViewSection.js":"20","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewSectionStyle.js":"21","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskListItemStyle.js":"22"},{"size":356,"mtime":1607230939189,"results":"23","hashOfConfig":"24"},{"size":4498,"mtime":1609632158380,"results":"25","hashOfConfig":"24"},{"size":536,"mtime":1607230919246,"results":"26","hashOfConfig":"24"},{"size":1226,"mtime":1610594209491,"results":"27","hashOfConfig":"24"},{"size":1887,"mtime":1610573515533,"results":"28","hashOfConfig":"24"},{"size":598,"mtime":1610588453924,"results":"29","hashOfConfig":"24"},{"size":1012,"mtime":1610594209492,"results":"30","hashOfConfig":"24"},{"size":182,"mtime":1609631181113,"results":"31","hashOfConfig":"24"},{"size":2008,"mtime":1610659499746,"results":"32","hashOfConfig":"24"},{"size":407,"mtime":1609630511352,"results":"33","hashOfConfig":"24"},{"size":2054,"mtime":1610594209495,"results":"34","hashOfConfig":"24"},{"size":380,"mtime":1607895408935,"results":"35","hashOfConfig":"24"},{"size":283,"mtime":1607895408935,"results":"36","hashOfConfig":"24"},{"size":373,"mtime":1607895563005,"results":"37","hashOfConfig":"24"},{"size":224,"mtime":1607898435175,"results":"38","hashOfConfig":"24"},{"size":3560,"mtime":1610659517457,"results":"39","hashOfConfig":"24"},{"size":383,"mtime":1607902000724,"results":"40","hashOfConfig":"24"},{"size":144,"mtime":1609631816596,"results":"41","hashOfConfig":"24"},{"size":733,"mtime":1610587846264,"results":"42","hashOfConfig":"24"},{"size":543,"mtime":1610587888143,"results":"43","hashOfConfig":"24"},{"size":234,"mtime":1610584016474,"results":"44","hashOfConfig":"24"},{"size":206,"mtime":1610587789427,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"181oofu",{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js",[],["101","102","103","104","105","106"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js",["107","108","109","110"],"import React, { useState, useEffect } from 'react'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport { Transition } from 'react-transition-group';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport clsx from 'clsx'\nimport { useTheme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport AddIcon from '@material-ui/icons/Add';\nimport HomeView from './components/HomeView'\nimport ProjectsList from './components/ProjectsList'\nimport TaskView from './components/TaskView';\nimport User from './modules/User';\nimport { drawerWidth, useStyles } from './components/styles/AppStyle';\nimport Task from './modules/Task';\nimport TaskModal from './components/TaskModal';\nimport { findProject } from './modules/hooks';\n\nfunction App() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const [modalOpen, setModalOpen] = useState(false);\n  const handleModalOpen = () => {\n    setModalOpen(true)\n  }\n  const handleModalClose = () =>{\n    setModalOpen(false)\n  }\n  const grabStorage = () => {\n    let user;\n    if(localStorage.getItem('taskMe') === null) {\n      user = new User()\n    } else {\n      user =  JSON.parse(localStorage.getItem('taskMe'))\n    }\n    return user;\n  }\n  const [user, setUser] = useState(grabStorage())\n\n\n\n\n\n  return (\n    <section className={ classes.root }>\n     <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={ clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        }) }\n      >\n        <Toolbar className={ classes.toolbar } disableGutters>\n          <div className = { classes.navContainer }>\n            <IconButton\n              color=\"inherit\" \n              aria-label=\"open drawer\"\n              onClick={ handleDrawerOpen }\n              edge=\"start\"\n              className={ clsx(classes.menuButton, open && classes.hide) }\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Task.Me\n            </Typography>\n          </div>\n          <IconButton onClick= { handleModalOpen } className={ classes.addButton }>\n            <AddIcon/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Toolbar/>\n      <Drawer\n        className={ classes.drawer }\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={ open }\n        classes={ {\n          paper: classes.drawerPaper,\n        } }\n      >\n         <div className={ classes.drawerHeader }>\n          <IconButton onClick={ handleDrawerClose }>\n            {theme.direction === 'ltr' ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/\">Home</Link>\n          </ListItem>\n          <ListItem>\n            <Link to=\"/projects\">Projects</Link>\n          </ListItem>\n        </List>\n        <Divider />\n        <List />\n      </Drawer>\n      <main\n        className={ clsx(classes.content, {\n          [classes.contentShift]: open,\n        }) }\n      >\n        <div className={ classes.drawerHeader } />\n        <Switch>\n          <Route exact path=\"/projects\" render = { ()=> <ProjectsList setUser = { setUser } projects = { user.projects } /> }/>\n\n          <Route exact path=\"/projects/:projectName\"\n            render = { routeProps => <TaskView project={ findProject(user, routeProps.match.params.projectName) }/> }/>\n\n          <Route exact path=\"/\" render = { () => <HomeView projects = { user.projects } /> } />\n        </Switch>\n        <TaskModal user = { user } setUser = { setUser } handleClose = { handleModalClose } open = { modalOpen }/>\n        </main>\n    </section>\n  )\n}\n\nexport default App\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js",["111","112","113","114","115","116","117"],"import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ProjectCard from './ProjectCard';\nimport TaskViewSection from './TaskViewSection'; \nimport TaskListItem from './TaskListItem';\n\nexport default function HomeView({ projects }) {\n  return (\n    <Grid container>\n      <Grid item xs={ 12 }>\n        <Typography variant=\"h2\" component=\"h1\">\n          Welcome to Task.Me\n        </Typography>\n        <Typography paragraph>\n          Here you can find your upcoming tasks and pin your most important projects!\n        </Typography>\n        <Typography variant=\"h3\">\n          All Tasks\n        </Typography>\n        <Grid item xs= {12} sm = {10} md = {8}>\n          {projects.map(project => (\n            <TaskViewSection tasks = { project.tasks }/>\n          ))}\n        </Grid>\n\n        <Typography variant=\"h3\">\n          Projects\n        </Typography>\n          \n        <Grid container spacing = { 3 }>\n          {projects.map(project => (\n            <Grid key={ project.id } item xs={ 12 } sm={ 6 } md={ 4 } >\n              <ProjectCard project={ project } />\n            </Grid>\n          ))}\n        </Grid>\n\n      </Grid>\n    </Grid>\n  )\n}\n\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js",["118"],"/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport ProjectModal from './ProjectModal';\nimport ProjectCard from './ProjectCard';\nimport useStyles from './styles/ProjectListStyle';\n\nfunction ProjectsList({ projects, setUser }) {\n  const classes = useStyles()\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  return (\n    <Grid container spacing={ 3 }>\n      <Grid container>\n        <Grid item xs={ 10 }>\n          <Typography item xs={ 10 } variant=\"h2\" component=\"h1\">\n            Projects\n            </Typography>\n        </Grid>\n        <Grid item xs={ 12 } md={ 2 } className={ classes.buttonContainer }>\n          {projects.length > 0 &&\n            <Button className={ classes.addProjectButton }\n              variant=\"contained\"\n              onClick={ handleOpen }\n            >\n              Add A Project\n              </Button>\n          }\n        </Grid>\n      </Grid>\n      { projects.length > 0 && projects.map((project) => (\n\n        <Grid key={ project.id } item xs={ 12 } sm={ 6 } md={ 4 } >\n          <ProjectCard project={ project } />\n        </Grid>\n      ))}\n      { projects.length === 0 &&\n        <Grid>\n          <Typography variant=\"h5\"> You do not have any projects yet!</Typography>\n          <Button className={ classes.addProjectButton }\n            variant=\"contained\"\n            onClick={ handleOpen }\n          >\n            Add A Project\n          </Button>\n        </Grid>\n      }\n      <ProjectModal setUser={ setUser } handleClose={ handleClose } open={ open } />\n    </Grid>\n  )\n}\n\nexport default ProjectsList\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js",["119"],"import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TaskViewSection from './TaskViewSection';\nimport TaskListItem from './TaskListItem';\n\n\nexport default function TaskView({ project }) {\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Grid item xs = { 10 }>\n        <Typography variant=\"h2\" component =\"h1\" align=\"center\">{project.name}</Typography>\n      </Grid>\n      <Grid item xs = { 12 } md = { 8 }>\n        <TaskViewSection tasks = { project.tasks }/>\n      </Grid>\n\n    </Grid>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Project.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/AppStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectListStyle.js",["120","121"],"import { makeStyles, useTheme } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  addProjectButton: {\n    \"&:hover\": {\n      backgroundColor: \"#eb5e28\"\n    },\n    margin: \"0 auto\"\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}))\n\nexport default useStyles\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectCardStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectModalStyle.js",["122"],"import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n\n  header: {\n    marginBottom: \"1rem\",\n    margin: \"0 auto\"\n  },\n  addButton: {\n    fontWeight: 500,\n    margin: '1rem 0 1rem 0',\n    float: \"right\"\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: \"1rem\"\n  }\n\n}));\n\nexport default useStyles\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Task.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskModal.js",["123","124","125","126"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskModalStyle.js",["127"],"import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginBottom: \"1rem\",\n    backgroundColor: \"#eb5e28\",\n  },\n  addButton: {\n    fontWeight: 500,\n    margin: '1rem 0 1rem 0',\n    float: \"right\"\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: \"1rem\"\n  }\n\n}));\n\nexport default useStyles\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/hooks.js",["128"],"const findProject = (user, projectName) => {\n  return user.projects.find(project => projectName === project.name)\n} \n\n\nexport {\n  findProject \n}","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskListItem.js",["129"],"import React from 'react'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nimport useStyles from './styles/TaskListItemStyle';\n\nexport default function TaskListItem({ task }) {\n  const classes = useStyles()\n  const handleClick = (e) => {\n    console.log(e.target.value)\n  }\n  return (\n    <ListItem divider className= { classes.root }>\n      <ListItemText>\n        {task.name}\n      </ListItemText>\n      <ListItemIcon onClick= { handleClick }>\n        <CheckCircleIcon className={ classes.checkButton }/>\n      </ListItemIcon>\n    </ListItem>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskViewSection.js",["130"],"import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport useStyles from './styles/TaskViewSectionStyle';\nimport TaskListItem from './TaskListItem';\n\nexport default function TaskViewSection({ tasks }) {\n  const classes = useStyles()\n  return (\n    <Paper elevation= { 3 }>\n      <List className={ classes.root } >\n        { tasks.map(task => (\n          <TaskListItem task = { task }/>\n        ))}\n      </List>\n    </Paper>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewSectionStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskListItemStyle.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"147","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":20},{"ruleId":"143","severity":1,"message":"148","line":24,"column":10,"nodeType":"145","messageId":"146","endLine":24,"endColumn":21},{"ruleId":"143","severity":1,"message":"149","line":25,"column":8,"nodeType":"145","messageId":"146","endLine":25,"endColumn":12},{"ruleId":"143","severity":1,"message":"150","line":6,"column":8,"nodeType":"145","messageId":"146","endLine":6,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":21,"column":24,"nodeType":"153","fix":"154"},{"ruleId":"151","severity":1,"message":"155","line":21,"column":27,"nodeType":"153","fix":"156"},{"ruleId":"151","severity":1,"message":"152","line":21,"column":34,"nodeType":"153","fix":"157"},{"ruleId":"151","severity":1,"message":"155","line":21,"column":37,"nodeType":"153","fix":"158"},{"ruleId":"151","severity":1,"message":"152","line":21,"column":44,"nodeType":"153","fix":"159"},{"ruleId":"151","severity":1,"message":"155","line":21,"column":46,"nodeType":"153","fix":"160"},{"ruleId":"143","severity":1,"message":"161","line":6,"column":10,"nodeType":"145","messageId":"146","endLine":6,"endColumn":14},{"ruleId":"143","severity":1,"message":"150","line":5,"column":8,"nodeType":"145","messageId":"146","endLine":5,"endColumn":20},{"ruleId":"143","severity":1,"message":"162","line":1,"column":22,"nodeType":"145","messageId":"146","endLine":1,"endColumn":30},{"ruleId":"143","severity":1,"message":"163","line":3,"column":31,"nodeType":"145","messageId":"146","endLine":3,"endColumn":36},{"ruleId":"143","severity":1,"message":"163","line":3,"column":31,"nodeType":"145","messageId":"146","endLine":3,"endColumn":36},{"ruleId":"143","severity":1,"message":"164","line":6,"column":8,"nodeType":"145","messageId":"146","endLine":6,"endColumn":18},{"ruleId":"143","severity":1,"message":"165","line":26,"column":19,"nodeType":"145","messageId":"146","endLine":26,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":87,"column":35,"nodeType":"153","fix":"166"},{"ruleId":"151","severity":1,"message":"155","line":89,"column":16,"nodeType":"153","fix":"167"},{"ruleId":"143","severity":1,"message":"163","line":3,"column":31,"nodeType":"145","messageId":"146","endLine":3,"endColumn":36},{"ruleId":"168","severity":1,"message":"169","line":8,"column":2,"nodeType":"170","messageId":"171","fix":"172"},{"ruleId":"173","severity":1,"message":"174","line":12,"column":5,"nodeType":"175","messageId":"176","endLine":12,"endColumn":16},{"ruleId":"143","severity":1,"message":"177","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":15},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["178"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Transition' is defined but never used.","'drawerWidth' is defined but never used.","'Task' is defined but never used.","'TaskListItem' is defined but never used.","react/jsx-curly-spacing","A space is required after '{'","JSXExpressionContainer",{"range":"179","text":"180"},"A space is required before '}'",{"range":"181","text":"180"},{"range":"182","text":"180"},{"range":"183","text":"180"},{"range":"184","text":"180"},{"range":"185","text":"180"},"'Link' is defined but never used.","'useTheme' is defined but never used.","'theme' is defined but never used.","'Typography' is defined but never used.","'setSection' is assigned a value but never used.",{"range":"186","text":"180"},{"range":"187","text":"180"},"eol-last","Newline required at end of file but not found.","Program","missing",{"range":"188","text":"189"},"no-console","Unexpected console statement.","MemberExpression","unexpected","'Divider' is defined but never used.","padding-line-between-statements",[707,707]," ",[709,709],[717,717],[719,719],[727,727],[728,728],[3198,3198],[3260,3260],[144,144],"\n"]