[{"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js":"1","/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js":"2","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js":"3","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js":"4","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js":"5","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js":"6","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js":"7","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js":"8","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js":"9"},{"size":356,"mtime":1607230939189,"results":"10","hashOfConfig":"11"},{"size":5432,"mtime":1607656622801,"results":"12","hashOfConfig":"11"},{"size":536,"mtime":1607230919246,"results":"13","hashOfConfig":"11"},{"size":385,"mtime":1607238962040,"results":"14","hashOfConfig":"11"},{"size":1722,"mtime":1607658688859,"results":"15","hashOfConfig":"11"},{"size":131,"mtime":1607391616804,"results":"16","hashOfConfig":"11"},{"size":727,"mtime":1607296772209,"results":"17","hashOfConfig":"11"},{"size":73,"mtime":1607655852457,"results":"18","hashOfConfig":"11"},{"size":1855,"mtime":1607662530083,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ag2ick",{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js",[],["43","44","45","46","47","48"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js",["49","50","51","52","53"],"import React, {useState, useEffect} from 'react'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport { Transition } from 'react-transition-group';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport clsx from 'clsx'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport AddIcon from '@material-ui/icons/Add';\nimport HomeView from './components/HomeView'\nimport ProjectsList from './components/ProjectsList'\nimport TaskView from './components/TaskView';\nimport User from './modules/User';\n\nconst drawerWidth = 240\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  addButton : {\n    backgroundColor: \"#eb5e28\",\n    color: \"#FFFFFF\",\n    marginLeft: \"85%\"\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    backgroundColor: \"#252422\"\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n\n}))\n\nfunction App() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const [currProject, setCurrProject] = useState();\n  const grabStorage = () => {\n    let user;\n    if(localStorage.getItem('taskMe') === null){\n      user = new User()\n    } else {\n      user =  JSON.parse(localStorage.getItem('taskMe'))\n    }\n\n    return user;\n  }\n  const [user, setUser] = useState(grabStorage())\n  const [projects, setProjects] = useState(user.projects);\n\n  return (\n    <section className={classes.root}>\n     <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Task.Me\n          </Typography>\n          <IconButton className={classes.addButton}>\n            <AddIcon/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Toolbar/>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n         <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/\">Home</Link>\n          </ListItem>\n          <ListItem>\n            <Link to=\"/projects\">Projects</Link>\n          </ListItem>\n        </List>\n   \n        <Divider />\n        <List />\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n      <div className={classes.drawerHeader} />\n      <Switch>\n        <Route exact path=\"/projects\" render = {()=> <ProjectsList projects = { projects } />}/>\n        <Route exact path=\"/projects/:projectName\"\n          render = {() => <TaskView project={currProject}/>}/>\n        <Route exact path=\"/\" render = {() => <HomeView/> }>\n        </Route>\n      </Switch>\n      </main>\n    </section>\n  )\n}\n\nexport default App\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js",["54","55","56","57","58"],"/* eslint-disable import/no-extraneous-dependencies */\nimport React, {useState} from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom'\nimport Modal from '@material-ui/core/Modal';\nimport ProjectModal from './ProjectModal'\nimport ProjectCard from './ProjectCard';\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  addProjectButton : {\n    \"&:hover\" : {\n      backgroundColor: \"#eb5e28\"\n    }\n\n  }\n}))\n\nfunction ProjectsList({ projects }) {\n  const classes = useStyles()\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true)\n  }\n  const handleClose = () =>{\n    setOpen(false)\n  }\n  return (\n      <Grid container spacing = {3}>\n        <Grid item xs = {12}>\n          <Typography variant = \"h2\" component=\"h1\">\n            Projects\n          </Typography>\n        </Grid>\n        { projects.length > 0 && projects.map((project) => (\n          <Grid item xs = {12} sm = {6} md = {4} >\n            <ProjectCard project = {project}/>\n          </Grid>\n        ))}\n        { projects.length === 0 && \n        <Grid>\n          <Typography variant = \"h5\"> You do not have any projects yet!</Typography>\n          <Button className={classes.addProjectButton}\n          variant=\"contained\"\n          onClick = {handleOpen}\n          >\n            Add A Project\n          </Button>\n        </Grid>       \n        }   \n        <ProjectModal handleClose = {handleClose} open = {open}/>\n      </Grid>\n  )\n}\n\nexport default ProjectsList\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js",["59"],"import React from 'react'\n\nexport default function TaskView({ project }) {\n  \n  return (\n    <div>\n      taskview\n    </div>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js",["60","61","62"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function ProjectCard({ project }) {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant = \"h5\">\n          {project}\n        </Typography>\n      </CardContent>\n    </Card>\n    \n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js",["63","64","65","66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":26,"nodeType":"82","messageId":"83","endLine":1,"endColumn":35},{"ruleId":"80","severity":1,"message":"84","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":20},{"ruleId":"80","severity":1,"message":"85","line":100,"column":23,"nodeType":"82","messageId":"83","endLine":100,"endColumn":37},{"ruleId":"80","severity":1,"message":"86","line":111,"column":16,"nodeType":"82","messageId":"83","endLine":111,"endColumn":23},{"ruleId":"80","severity":1,"message":"87","line":112,"column":20,"nodeType":"82","messageId":"83","endLine":112,"endColumn":31},{"ruleId":"80","severity":1,"message":"88","line":3,"column":22,"nodeType":"82","messageId":"83","endLine":3,"endColumn":30},{"ruleId":"80","severity":1,"message":"89","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":14},{"ruleId":"80","severity":1,"message":"90","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":13},{"ruleId":"80","severity":1,"message":"91","line":12,"column":7,"nodeType":"82","messageId":"83","endLine":12,"endColumn":18},{"ruleId":"80","severity":1,"message":"92","line":14,"column":31,"nodeType":"82","messageId":"83","endLine":14,"endColumn":36},{"ruleId":"80","severity":1,"message":"93","line":3,"column":36,"nodeType":"82","messageId":"83","endLine":3,"endColumn":43},{"ruleId":"80","severity":1,"message":"94","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":19},{"ruleId":"80","severity":1,"message":"95","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":14},{"ruleId":"80","severity":1,"message":"96","line":22,"column":9,"nodeType":"82","messageId":"83","endLine":22,"endColumn":16},{"ruleId":"80","severity":1,"message":"97","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":13},{"ruleId":"80","severity":1,"message":"92","line":13,"column":31,"nodeType":"82","messageId":"83","endLine":13,"endColumn":36},{"ruleId":"80","severity":1,"message":"98","line":35,"column":40,"nodeType":"82","messageId":"83","endLine":35,"endColumn":45},{"ruleId":"80","severity":1,"message":"99","line":41,"column":10,"nodeType":"82","messageId":"83","endLine":41,"endColumn":19},{"ruleId":"80","severity":1,"message":"100","line":41,"column":21,"nodeType":"82","messageId":"83","endLine":41,"endColumn":33},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["101"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Transition' is defined but never used.","'setCurrProject' is assigned a value but never used.","'setUser' is assigned a value but never used.","'setProjects' is assigned a value but never used.","'useTheme' is defined but never used.","'Link' is defined but never used.","'Modal' is defined but never used.","'drawerWidth' is assigned a value but never used.","'theme' is defined but never used.","'project' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.","'Paper' is defined but never used.","'event' is defined but never used.","'fullWidth' is assigned a value but never used.","'setFullWidth' is assigned a value but never used.","padding-line-between-statements"]