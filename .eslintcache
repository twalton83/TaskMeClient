[{"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js":"1","/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js":"2","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js":"3","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js":"4","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js":"5","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js":"6","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js":"7","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js":"8","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js":"9","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Project.js":"10","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/AppStyle.js":"11","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectListStyle.js":"12","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectCardStyle.js":"13","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectModalStyle.js":"14","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Task.js":"15","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskModal.js":"16","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskModalStyle.js":"17","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskListItem.js":"18","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskViewSection.js":"19","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewSectionStyle.js":"20","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskListItemStyle.js":"21","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskDetailsModal.js":"22","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskDetailsModalStyle.js":"23","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/helpers.js":"24","/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/seeds.js":"25","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewStyle.js":"26","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskSectionItemStyle.js":"27","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/HomeViewStyle.js":"28"},{"size":356,"mtime":1607230939189,"results":"29","hashOfConfig":"30"},{"size":4874,"mtime":1610864457927,"results":"31","hashOfConfig":"30"},{"size":536,"mtime":1607230919246,"results":"32","hashOfConfig":"30"},{"size":2656,"mtime":1610864457928,"results":"33","hashOfConfig":"30"},{"size":1922,"mtime":1610864457929,"results":"34","hashOfConfig":"30"},{"size":2174,"mtime":1610870055020,"results":"35","hashOfConfig":"30"},{"size":1211,"mtime":1610864457928,"results":"36","hashOfConfig":"30"},{"size":90,"mtime":1610864457936,"results":"37","hashOfConfig":"30"},{"size":2017,"mtime":1610864457929,"results":"38","hashOfConfig":"30"},{"size":520,"mtime":1610864457935,"results":"39","hashOfConfig":"30"},{"size":2003,"mtime":1610769170446,"results":"40","hashOfConfig":"30"},{"size":365,"mtime":1610864457932,"results":"41","hashOfConfig":"30"},{"size":283,"mtime":1607895408935,"results":"42","hashOfConfig":"30"},{"size":368,"mtime":1610864457932,"results":"43","hashOfConfig":"30"},{"size":616,"mtime":1610870759282,"results":"44","hashOfConfig":"30"},{"size":3825,"mtime":1610870847593,"results":"45","hashOfConfig":"30"},{"size":489,"mtime":1610864457933,"results":"46","hashOfConfig":"30"},{"size":2488,"mtime":1610870129881,"results":"47","hashOfConfig":"30"},{"size":635,"mtime":1610870025237,"results":"48","hashOfConfig":"30"},{"size":204,"mtime":1610866626477,"results":"49","hashOfConfig":"30"},{"size":419,"mtime":1610868567952,"results":"50","hashOfConfig":"30"},{"size":3521,"mtime":1610870689994,"results":"51","hashOfConfig":"30"},{"size":489,"mtime":1610864457933,"results":"52","hashOfConfig":"30"},{"size":408,"mtime":1610865666714,"results":"53","hashOfConfig":"30"},{"size":436,"mtime":1610864457937,"results":"54","hashOfConfig":"30"},{"size":172,"mtime":1610868720520,"results":"55","hashOfConfig":"30"},{"size":217,"mtime":1610864457934,"results":"56","hashOfConfig":"30"},{"size":319,"mtime":1610864457931,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1cj7td0",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/Tatiana/Desktop/CODE/taskmeclient/src/reportWebVitals.js",[],["120","121","122","123","124","125"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/App.js",["126"],"import React, { useState } from 'react'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport { Transition } from 'react-transition-group';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport clsx from 'clsx'\nimport { useTheme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport AddIcon from '@material-ui/icons/Add';\nimport HomeView from './components/HomeView'\nimport ProjectsList from './components/ProjectsList'\nimport TaskView from './components/TaskView';\nimport User from './modules/User';\nimport { useStyles } from './components/styles/AppStyle';\nimport TaskModal from './components/TaskModal';\nimport { findProject } from './modules/helpers';\n\n// development only\nimport seeds from './modules/seeds';\n\nfunction App() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const [modalOpen, setModalOpen] = useState(false);\n  const handleModalOpen = () => {\n    setModalOpen(true)\n  }\n  const handleModalClose = () =>{\n    setModalOpen(false)\n  }\n  const grabStorage = () => {\n    let user;\n    if(localStorage.getItem('taskMe') === null) {\n      // dev only\n      user = new User(seeds())\n    } else {\n      user =  JSON.parse(localStorage.getItem('taskMe'))\n    }\n    return user;\n  }\n  const [user, setUser] = useState(grabStorage())\n\n  const deleteProj = (projectId) => {\n    const projectToRemove = findProject(user, projectId)\n    const prevProjects = user.projects.filter(proj => proj !== projectToRemove)\n    setUser({ ...user, projects: [... prevProjects] })\n  }\n\n\n\n\n  return (\n    <section className={ classes.root }>\n     <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={ clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        }) }\n      >\n        <Toolbar className={ classes.toolbar } disableGutters>\n          <div className = { classes.navContainer }>\n            <IconButton\n              color=\"inherit\" \n              aria-label=\"open drawer\"\n              onClick={ handleDrawerOpen }\n              edge=\"start\"\n              className={ clsx(classes.menuButton, open && classes.hide) }\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Task.Me\n            </Typography>\n          </div>\n          <IconButton onClick= { handleModalOpen } className={ classes.addButton }>\n            <AddIcon/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Toolbar/>\n      <Drawer\n        className={ classes.drawer }\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={ open }\n        classes={ {\n          paper: classes.drawerPaper,\n        } }\n      >\n         <div className={ classes.drawerHeader }>\n          <IconButton onClick={ handleDrawerClose }>\n            {theme.direction === 'ltr' ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/\">Home</Link>\n          </ListItem>\n          <ListItem>\n            <Link to=\"/projects\">Projects</Link>\n          </ListItem>\n        </List>\n        <Divider />\n        <List />\n      </Drawer>\n      <main\n        className={ clsx(classes.content, {\n          [classes.contentShift]: open,\n        }) }\n      >\n        <div className={ classes.drawerHeader } />\n        <Switch>\n          <Route exact path=\"/projects\" render = { ()=> <ProjectsList user = { user } setUser = { setUser } projects = { user.projects } deleteProj = { deleteProj } /> }/>\n\n          <Route exact path=\"/projects/:projectId\"\n            render = { routeProps => <TaskView user = { user } setUser = { setUser } project={ findProject(user, routeProps.match.params.projectId) }/> }/>\n\n          <Route exact path=\"/\" render = { () => <HomeView user = { user } setUser = { setUser }  deleteProj = { deleteProj } /> } />\n        </Switch>\n        <TaskModal user = { user } setUser = { setUser } handleClose = { handleModalClose } open = { modalOpen }/>\n        </main>\n    </section>\n  )\n}\n\nexport default App\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/index.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/HomeView.js",["127"],"import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ProjectCard from './ProjectCard';\nimport TaskViewSection from './TaskViewSection'; \n\nexport default function HomeView({ user, setUser }) {\n  return (\n    <Grid container>\n      <Grid item xs={ 12 }>\n        <Typography variant=\"h2\" component=\"h1\">\n          Welcome to Task.Me\n        </Typography>\n        <Typography paragraph>\n          Here you can find your upcoming tasks and pin your most important projects!\n        </Typography>\n        <Typography variant=\"h3\">\n          Upcoming Tasks\n        </Typography>\n        <Grid item xs= { 12 } sm = { 10 } md = { 8 }>\n          {user.projects.map(project => (\n            <TaskViewSection user = { user } setUser = { setUser } tasks = { project.tasks } project = { project } />\n          ))}\n        </Grid>\n\n        <Typography variant=\"h3\">\n          Projects\n        </Typography>\n          \n        <Grid container spacing = { 3 }>\n          {user.projects.map(project => (\n            <Grid key={ project.id } item xs={ 12 } sm={ 6 } md={ 4 } >\n              <ProjectCard project={ project } />\n            </Grid>\n          ))}\n        </Grid>\n\n      </Grid>\n    </Grid>\n  )\n}\n\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectsList.js",["128"],"/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport ProjectModal from './ProjectModal';\nimport ProjectCard from './ProjectCard';\nimport useStyles from './styles/ProjectListStyle';\n\nfunction ProjectsList({ projects, setUser }) {\n  const classes = useStyles()\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n  return (\n    <Grid container spacing={ 3 }>\n      <Grid container>\n        <Grid item xs={ 10 }>\n          <Typography xs={ 10 } variant=\"h2\" component=\"h1\">\n            Projects\n            </Typography>\n        </Grid>\n        <Grid item xs={ 12 } md={ 2 } className={ classes.buttonContainer }>\n          {projects.length > 0 &&\n            <Button className={ classes.addProjectButton }\n              variant=\"contained\"\n              onClick={ handleOpen }\n            >\n              Add A Project\n              </Button>\n          }\n        </Grid>\n      </Grid>\n      { projects.length > 0 && projects.map((project) => (\n\n        <Grid key={ project.id } item xs={ 12 } sm={ 6 } md={ 4 } >\n          <ProjectCard project={ project } />\n        </Grid>\n      ))}\n      { projects.length === 0 &&\n        <Grid>\n          <Typography variant=\"h5\"> You do not have any projects yet!</Typography>\n          <Button className={ classes.addProjectButton }\n            variant=\"contained\"\n            onClick={ handleOpen }\n          >\n            Add A Project\n          </Button>\n        </Grid>\n      }\n      <ProjectModal setUser={ setUser } handleClose={ handleClose } open={ open } />\n    </Grid>\n  )\n}\n\nexport default ProjectsList\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskView.js",["129","130"],"import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TaskViewSection from './TaskViewSection';\nimport { findProject } from '../modules/helpers';\nimport useStyles from './styles/TaskViewStyle';\n\nexport default function TaskView({ user, setUser, project }) {\n  const classes = useStyles()\n  const completeTask = (taskId) => {\n    const projectToUpdate = findProject(user, project.id)\n    projectToUpdate.completeTask(taskId)\n    const prevProjects = user.projects.filter(proj => proj !== project)\n    setUser({ ...user, projects: [... prevProjects, projectToUpdate] })\n  }\n  const incompleteTasks = project.tasks.filter(task => !task.completed)\n  const completedTasks = project.tasks.filter(task => task.completed)\n  \n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Grid item xs = { 10 }>\n        <Typography variant=\"h2\" component =\"h1\" align=\"center\">{ project.name }</Typography>\n      </Grid>\n      <Grid item xs = { 12 } md = { 8 } className= { classes.incompletedTasks }>\n        <TaskViewSection user = { user } completeTask = { completeTask } tasks = { incompleteTasks } project = { project } setUser = { setUser } />\n      </Grid>\n\n      {\n       completedTasks.length > 0 &&\n      <Grid item xs = { 10 }  className= { classes.completedTasks }>\n        \n        <Accordion>\n          <AccordionSummary\n           expandIcon={<ExpandMoreIcon />}\n           aria-controls=\"panel1a-content\"\n           id=\"panel1a-header\">\n            <Typography variant=\"h6\" align=\"center\"> Completed Tasks </Typography>\n          </AccordionSummary>\n       \n          <AccordionDetails>\n            <TaskViewSection user = { user } completeTask = { completeTask } tasks = { completedTasks } project = { project } setUser = { setUser } /> \n          </AccordionDetails>\n        </Accordion>\n      </Grid>\n       }\n    </Grid>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectCard.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/User.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/ProjectModal.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Project.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/AppStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectListStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectCardStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/ProjectModalStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/Task.js",["131"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskModal.js",["132"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskModalStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskListItem.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskViewSection.js",["133"],"import React from 'react'\nimport Paper from '@material-ui/core/Paper';\n// import Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport useStyles from './styles/TaskViewSectionStyle';\nimport TaskListItem from './TaskListItem';\n\nexport default function TaskViewSection({ tasks, completeTask, user, setUser }) {\n  const classes = useStyles()\n  return (\n      <List className={ classes.root } >\n        { tasks.map(task => (         \n            <TaskListItem user =  { user } completeTask = { completeTask }  key = { task.id } task = { task } setUser = { setUser } />\n        ))}\n      </List>\n  )\n}\n","/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewSectionStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskListItemStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/TaskDetailsModal.js",["134","135","136","137","138","139","140"],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskDetailsModalStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/helpers.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/modules/seeds.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskViewStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/TaskSectionItemStyle.js",[],"/Users/Tatiana/Desktop/CODE/taskmeclient/src/components/styles/HomeViewStyle.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":20},{"ruleId":"157","severity":1,"message":"158","line":49,"column":52,"nodeType":"159","fix":"160"},{"ruleId":"153","severity":1,"message":"161","line":6,"column":10,"nodeType":"155","messageId":"156","endLine":6,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":38,"column":23,"nodeType":"159","fix":"162"},{"ruleId":"157","severity":1,"message":"163","line":38,"column":42,"nodeType":"159","fix":"164"},{"ruleId":"165","severity":1,"message":"166","line":20,"column":5,"nodeType":"167","messageId":"168","endLine":20,"endColumn":16},{"ruleId":"153","severity":1,"message":"169","line":25,"column":19,"nodeType":"155","messageId":"156","endLine":25,"endColumn":29},{"ruleId":"153","severity":1,"message":"170","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":13},{"ruleId":"153","severity":1,"message":"171","line":1,"column":27,"nodeType":"155","messageId":"156","endLine":1,"endColumn":36},{"ruleId":"153","severity":1,"message":"172","line":6,"column":8,"nodeType":"155","messageId":"156","endLine":6,"endColumn":18},{"ruleId":"153","severity":1,"message":"173","line":24,"column":10,"nodeType":"155","messageId":"156","endLine":24,"endColumn":17},{"ruleId":"153","severity":1,"message":"169","line":24,"column":19,"nodeType":"155","messageId":"156","endLine":24,"endColumn":29},{"ruleId":"165","severity":1,"message":"166","line":32,"column":5,"nodeType":"167","messageId":"168","endLine":32,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":34,"column":5,"nodeType":"167","messageId":"168","endLine":34,"endColumn":16},{"ruleId":"153","severity":1,"message":"174","line":47,"column":9,"nodeType":"155","messageId":"156","endLine":47,"endColumn":21},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["175"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'Transition' is defined but never used.","Identifier","unusedVar","react/jsx-curly-spacing","A space is required after '{'","JSXExpressionContainer",{"range":"176","text":"177"},"'Link' is defined but never used.",{"range":"178","text":"177"},"A space is required before '}'",{"range":"179","text":"177"},"no-console","Unexpected console statement.","MemberExpression","unexpected","'setSection' is assigned a value but never used.","'Paper' is defined but never used.","'useEffect' is defined but never used.","'Typography' is defined but never used.","'section' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","padding-line-between-statements",[1843,1843]," ",[1685,1685],[1703,1703]]